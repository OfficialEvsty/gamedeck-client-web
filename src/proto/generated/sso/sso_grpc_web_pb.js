/**
 * @fileoverview gRPC-Web generated client stub for auth
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.12.4
// source: sso.proto



// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.auth = require('./sso_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.auth.AuthServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.auth.AuthServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.RegisterRequest,
 *   !proto.auth.RegisterResponse>}
 */
const methodDescriptor_AuthService_Register = new grpc.web.MethodDescriptor(
  '/auth.AuthService/Register',
  grpc.web.MethodType.UNARY,
  proto.auth.RegisterRequest,
  proto.auth.RegisterResponse,
  /**
   * @param {!proto.auth.RegisterRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.auth.RegisterResponse.deserializeBinary
);


/**
 * @param {!proto.auth.RegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.RegisterResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.RegisterResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AuthServiceClient.prototype.register =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.AuthService/Register',
      request,
      metadata || {},
      methodDescriptor_AuthService_Register,
      callback);
};


/**
 * @param {!proto.auth.RegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.RegisterResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AuthServicePromiseClient.prototype.register =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.AuthService/Register',
      request,
      metadata || {},
      methodDescriptor_AuthService_Register);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.LoginRequest,
 *   !proto.auth.LoginResponse>}
 */
const methodDescriptor_AuthService_Login = new grpc.web.MethodDescriptor(
  '/auth.AuthService/Login',
  grpc.web.MethodType.UNARY,
  proto.auth.LoginRequest,
  proto.auth.LoginResponse,
  /**
   * @param {!proto.auth.LoginRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.auth.LoginResponse.deserializeBinary
);


/**
 * @param {!proto.auth.LoginRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.LoginResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.LoginResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AuthServiceClient.prototype.login =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.AuthService/Login',
      request,
      metadata || {},
      methodDescriptor_AuthService_Login,
      callback);
};


/**
 * @param {!proto.auth.LoginRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.LoginResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AuthServicePromiseClient.prototype.login =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.AuthService/Login',
      request,
      metadata || {},
      methodDescriptor_AuthService_Login);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.IsAdminRequest,
 *   !proto.auth.IsAdminResponse>}
 */
const methodDescriptor_AuthService_IsAdmin = new grpc.web.MethodDescriptor(
  '/auth.AuthService/IsAdmin',
  grpc.web.MethodType.UNARY,
  proto.auth.IsAdminRequest,
  proto.auth.IsAdminResponse,
  /**
   * @param {!proto.auth.IsAdminRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.auth.IsAdminResponse.deserializeBinary
);


/**
 * @param {!proto.auth.IsAdminRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.IsAdminResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.IsAdminResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AuthServiceClient.prototype.isAdmin =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.AuthService/IsAdmin',
      request,
      metadata || {},
      methodDescriptor_AuthService_IsAdmin,
      callback);
};


/**
 * @param {!proto.auth.IsAdminRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.IsAdminResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AuthServicePromiseClient.prototype.isAdmin =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.AuthService/IsAdmin',
      request,
      metadata || {},
      methodDescriptor_AuthService_IsAdmin);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.RefreshTokenRequest,
 *   !proto.auth.RefreshTokenResponse>}
 */
const methodDescriptor_AuthService_RefreshToken = new grpc.web.MethodDescriptor(
  '/auth.AuthService/RefreshToken',
  grpc.web.MethodType.UNARY,
  proto.auth.RefreshTokenRequest,
  proto.auth.RefreshTokenResponse,
  /**
   * @param {!proto.auth.RefreshTokenRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.auth.RefreshTokenResponse.deserializeBinary
);


/**
 * @param {!proto.auth.RefreshTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.RefreshTokenResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.RefreshTokenResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AuthServiceClient.prototype.refreshToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.AuthService/RefreshToken',
      request,
      metadata || {},
      methodDescriptor_AuthService_RefreshToken,
      callback);
};


/**
 * @param {!proto.auth.RefreshTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.RefreshTokenResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AuthServicePromiseClient.prototype.refreshToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.AuthService/RefreshToken',
      request,
      metadata || {},
      methodDescriptor_AuthService_RefreshToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.LogoutRequest,
 *   !proto.auth.LogoutResponse>}
 */
const methodDescriptor_AuthService_Logout = new grpc.web.MethodDescriptor(
  '/auth.AuthService/Logout',
  grpc.web.MethodType.UNARY,
  proto.auth.LogoutRequest,
  proto.auth.LogoutResponse,
  /**
   * @param {!proto.auth.LogoutRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.auth.LogoutResponse.deserializeBinary
);


/**
 * @param {!proto.auth.LogoutRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.LogoutResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.LogoutResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AuthServiceClient.prototype.logout =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.AuthService/Logout',
      request,
      metadata || {},
      methodDescriptor_AuthService_Logout,
      callback);
};


/**
 * @param {!proto.auth.LogoutRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.LogoutResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AuthServicePromiseClient.prototype.logout =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.AuthService/Logout',
      request,
      metadata || {},
      methodDescriptor_AuthService_Logout);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.LogoutAllRequest,
 *   !proto.auth.LogoutAllResponse>}
 */
const methodDescriptor_AuthService_LogoutAll = new grpc.web.MethodDescriptor(
  '/auth.AuthService/LogoutAll',
  grpc.web.MethodType.UNARY,
  proto.auth.LogoutAllRequest,
  proto.auth.LogoutAllResponse,
  /**
   * @param {!proto.auth.LogoutAllRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.auth.LogoutAllResponse.deserializeBinary
);


/**
 * @param {!proto.auth.LogoutAllRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.LogoutAllResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.LogoutAllResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AuthServiceClient.prototype.logoutAll =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.AuthService/LogoutAll',
      request,
      metadata || {},
      methodDescriptor_AuthService_LogoutAll,
      callback);
};


/**
 * @param {!proto.auth.LogoutAllRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.LogoutAllResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AuthServicePromiseClient.prototype.logoutAll =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.AuthService/LogoutAll',
      request,
      metadata || {},
      methodDescriptor_AuthService_LogoutAll);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.auth.SessionServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.auth.SessionServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.UserSessionsRequest,
 *   !proto.auth.UserSessionsResponse>}
 */
const methodDescriptor_SessionService_GetUserSessions = new grpc.web.MethodDescriptor(
  '/auth.SessionService/GetUserSessions',
  grpc.web.MethodType.UNARY,
  proto.auth.UserSessionsRequest,
  proto.auth.UserSessionsResponse,
  /**
   * @param {!proto.auth.UserSessionsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.auth.UserSessionsResponse.deserializeBinary
);


/**
 * @param {!proto.auth.UserSessionsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.UserSessionsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.UserSessionsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.SessionServiceClient.prototype.getUserSessions =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.SessionService/GetUserSessions',
      request,
      metadata || {},
      methodDescriptor_SessionService_GetUserSessions,
      callback);
};


/**
 * @param {!proto.auth.UserSessionsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.UserSessionsResponse>}
 *     Promise that resolves to the response
 */
proto.auth.SessionServicePromiseClient.prototype.getUserSessions =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.SessionService/GetUserSessions',
      request,
      metadata || {},
      methodDescriptor_SessionService_GetUserSessions);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.auth.AccessServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.auth.AccessServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.AssignGroupRoleRequest,
 *   !proto.auth.AssignGroupRoleResponse>}
 */
const methodDescriptor_AccessService_AssignGroupRole = new grpc.web.MethodDescriptor(
  '/auth.AccessService/AssignGroupRole',
  grpc.web.MethodType.UNARY,
  proto.auth.AssignGroupRoleRequest,
  proto.auth.AssignGroupRoleResponse,
  /**
   * @param {!proto.auth.AssignGroupRoleRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.auth.AssignGroupRoleResponse.deserializeBinary
);


/**
 * @param {!proto.auth.AssignGroupRoleRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.AssignGroupRoleResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.AssignGroupRoleResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AccessServiceClient.prototype.assignGroupRole =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.AccessService/AssignGroupRole',
      request,
      metadata || {},
      methodDescriptor_AccessService_AssignGroupRole,
      callback);
};


/**
 * @param {!proto.auth.AssignGroupRoleRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.AssignGroupRoleResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AccessServicePromiseClient.prototype.assignGroupRole =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.AccessService/AssignGroupRole',
      request,
      metadata || {},
      methodDescriptor_AccessService_AssignGroupRole);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.RevokeGroupRoleRequest,
 *   !proto.auth.RevokeGroupRoleResponse>}
 */
const methodDescriptor_AccessService_RevokeGroupRole = new grpc.web.MethodDescriptor(
  '/auth.AccessService/RevokeGroupRole',
  grpc.web.MethodType.UNARY,
  proto.auth.RevokeGroupRoleRequest,
  proto.auth.RevokeGroupRoleResponse,
  /**
   * @param {!proto.auth.RevokeGroupRoleRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.auth.RevokeGroupRoleResponse.deserializeBinary
);


/**
 * @param {!proto.auth.RevokeGroupRoleRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.RevokeGroupRoleResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.RevokeGroupRoleResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AccessServiceClient.prototype.revokeGroupRole =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.AccessService/RevokeGroupRole',
      request,
      metadata || {},
      methodDescriptor_AccessService_RevokeGroupRole,
      callback);
};


/**
 * @param {!proto.auth.RevokeGroupRoleRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.RevokeGroupRoleResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AccessServicePromiseClient.prototype.revokeGroupRole =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.AccessService/RevokeGroupRole',
      request,
      metadata || {},
      methodDescriptor_AccessService_RevokeGroupRole);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.auth.VerificationServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.auth.VerificationServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.SaveEmailTokenRequest,
 *   !proto.auth.SaveEmailTokenResponse>}
 */
const methodDescriptor_VerificationService_SaveEmailToken = new grpc.web.MethodDescriptor(
  '/auth.VerificationService/SaveEmailToken',
  grpc.web.MethodType.UNARY,
  proto.auth.SaveEmailTokenRequest,
  proto.auth.SaveEmailTokenResponse,
  /**
   * @param {!proto.auth.SaveEmailTokenRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.auth.SaveEmailTokenResponse.deserializeBinary
);


/**
 * @param {!proto.auth.SaveEmailTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.SaveEmailTokenResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.SaveEmailTokenResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.VerificationServiceClient.prototype.saveEmailToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.VerificationService/SaveEmailToken',
      request,
      metadata || {},
      methodDescriptor_VerificationService_SaveEmailToken,
      callback);
};


/**
 * @param {!proto.auth.SaveEmailTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.SaveEmailTokenResponse>}
 *     Promise that resolves to the response
 */
proto.auth.VerificationServicePromiseClient.prototype.saveEmailToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.VerificationService/SaveEmailToken',
      request,
      metadata || {},
      methodDescriptor_VerificationService_SaveEmailToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.VerifyEmailRequest,
 *   !proto.auth.VerifyEmailResponse>}
 */
const methodDescriptor_VerificationService_VerifyEmail = new grpc.web.MethodDescriptor(
  '/auth.VerificationService/VerifyEmail',
  grpc.web.MethodType.UNARY,
  proto.auth.VerifyEmailRequest,
  proto.auth.VerifyEmailResponse,
  /**
   * @param {!proto.auth.VerifyEmailRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.auth.VerifyEmailResponse.deserializeBinary
);


/**
 * @param {!proto.auth.VerifyEmailRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.VerifyEmailResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.VerifyEmailResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.VerificationServiceClient.prototype.verifyEmail =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.VerificationService/VerifyEmail',
      request,
      metadata || {},
      methodDescriptor_VerificationService_VerifyEmail,
      callback);
};


/**
 * @param {!proto.auth.VerifyEmailRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.VerifyEmailResponse>}
 *     Promise that resolves to the response
 */
proto.auth.VerificationServicePromiseClient.prototype.verifyEmail =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.VerificationService/VerifyEmail',
      request,
      metadata || {},
      methodDescriptor_VerificationService_VerifyEmail);
};


module.exports = proto.auth;

