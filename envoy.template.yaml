admin:
  access_log_path: /dev/stdout
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901
static_resources:
  secrets:
    - name: server_cert
      tls_certificate:
        certificate_chain:
          filename: /var/lib/letsencrypt/live/teamspot.online/fullchain.pem
        private_key:
          filename: /var/lib/letsencrypt/live/teamspot.online/privkey.pem
  listeners:
    - name: listener_0
      address:
        socket_address:
          address: 0.0.0.0
          port_value: ${ENVOY_PORT}
      filter_chains:
        - transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificate_sds_secret_configs:
                  - name: server_cert
          filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                use_remote_address: true
                stat_prefix: ingress_http
                access_log:
                  - name: envoy.access_loggers.stdout
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: "/tmp/envoy_access.log"
                      log_format:
                        text_format: "[%START_TIME%] %REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL?:PATH)% %PROTOCOL% %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_SENT% %DURATION% ms\n"
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains: [${DOMAIN}]
                      cors:
                        allow_origin_string_match:
                          - prefix: "*"
                        allow_methods: "POST, GET, OPTIONS"
                        allow_credentials: true
                        allow_headers: "Content-Type, Authorization, x-user-agent, x-grpc-web"
                        expose_headers: "grpc-status, grpc-message"
                        max_age: "86400"
                      routes:
                        - match:
                            prefix: "/api"
                          route:
                            regex_rewrite:
                              pattern:
                                google_re2: {}
                                regex: "^/api/(.*)"
                              substitution: "\\1"
                            cluster: grpc_service
                        - match:
                            prefix: "/"
                          route:
                            cluster: web_client
                            timeout: 0s
                http_filters:
                  - name: envoy.filters.http.grpc_web
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
                  - name: envoy.filters.http.cors
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
                  - name: envoy.filters.http.lua
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      inline_code: |
                        function envoy_on_response(response_handle)
                          local refresh_token = response_handle:headers():get("refresh-token")
                          local expires = os.date("%a, %d %b %Y %H:%M:%S GMT", os.time() + 86400)
                          if refresh_token then
                            response_handle:logInfo("Refresh token found: " .. refresh_token)
                            response_handle:headers():add("set-cookie", "refreshToken=" .. refresh_token .. "; HttpOnly; Path=/; Secure; SameSite=Strict; Expires=" .. expires)
                          else
                            response_handle:logWarn("No refresh token found in headers")
                          end
                        end
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
    - name: grpc_service
      connect_timeout: 0.25s
      type: LOGICAL_DNS
      lb_policy: ROUND_ROBIN
      http2_protocol_options: {}
      load_assignment:
        cluster_name: grpc_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: ${GRPC_SERVER_HOST}
                      port_value: ${GRPC_SERVER_PORT}

    - name: web_client
      connect_timeout: 0.25s
      type: LOGICAL_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: web_client
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: web
                      port_value: ${REACT_PORT}